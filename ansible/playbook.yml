- name: Setup Kubernetes Dependencies
  hosts: all
  become: yes
  tasks:
    - name: Update APT cache
      apt:
        update_cache: yes

    - name: Disable swap temporarily
      command: swapoff -a

    - name: Disable swap permanently
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'

    - name: Load containerd kernel modules
      copy:
        dest: /etc/modules-load.d/containerd.conf
        content: |
          overlay
          br_netfilter

    - name: Set sysctl params
      copy:
        dest: /etc/sysctl.d/99-kubernetes-cri.conf
        content: |
          net.bridge.bridge-nf-call-iptables=1
          net.ipv4.ip_forward=1
          net.bridge.bridge-nf-call-ip6tables=1

    - name: Apply sysctl params
      command: sysctl --system

    - name: Install transport packages
      apt:
        name: apt-transport-https
        state: present

    - name: Add Docker GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker-apt-keyring.asc
        mode: '0644'

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch={{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' }} signed-by=/etc/apt/keyrings/docker-apt-keyring.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Add Kubernetes GPG key
      get_url:
        url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
        dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
        mode: '0644'

    - name: Add Kubernetes repository
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /"
        state: present

    - name: Install containerd
      apt:
        name: containerd.io
        state: present

    - name: Generate containerd default config if not exists
      shell: containerd config default > /etc/containerd/config.toml
      args:
        creates: /etc/containerd/config.toml

    - name: Ensure CRI plugin is enabled in containerd config
      lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^\s*disabled\s*=\s*true'
        line: 'disabled = false'
        insertafter: '\[plugins."io.containerd.grpc.v1.cri"\]'

    - name: Set SystemdCgroup = true
      replace:
        path: /etc/containerd/config.toml
        regexp: '^\s*SystemdCgroup = false'
        replace: '            SystemdCgroup = true'

    - name: Restart containerd
      systemd:
        name: containerd
        enabled: yes
        state: restarted

    - name: Install kubelet & kubeadm
      apt:
        name:
          - kubelet=1.29.*
          - kubeadm=1.29.*
        state: present
        update_cache: yes

    - name: Enable kubelet
      systemd:
        name: kubelet
        enabled: yes

    - name: Load br_netfilter
      modprobe:
        name: br_netfilter

- name: Reset Kubernetes Cluster
  hosts: master
  become: yes
  tasks:
    - name: Reset kubeadm
      command: kubeadm reset -f
      ignore_errors: yes

    - name: Remove k8s data dirs
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/kubernetes
        - /var/lib/etcd
        - /var/lib/kubelet
        - /var/lib/cni
        - /etc/cni
      ignore_errors: yes

    - name: Restart containerd and kubelet
      systemd:
        name: "{{ item }}"
        state: restarted
        enabled: yes
      loop:
        - containerd
        - kubelet

- hosts: master
  become: yes
  tasks:
    - name: Ensure /etc/kubernetes directory exists
      file:
        path: /etc/kubernetes
        state: directory
        mode: '0755'

    - name: Create an Empty file for Kubeadm configuring
      copy:
        content: ""
        dest: /etc/kubernetes/kubeadm-config.yaml
        force: no

    - name: Configure container runtime
      blockinfile:
        path: /etc/kubernetes/kubeadm-config.yaml
        block: |
          kind: ClusterConfiguration
          apiVersion: kubeadm.k8s.io/v1beta3
          networking:
            podSubnet: "10.244.0.0/16"
          ---
          kind: KubeletConfiguration
          apiVersion: kubelet.config.k8s.io/v1beta1
          runtimeRequestTimeout: "15m"
          cgroupDriver: "systemd"
          systemReserved:
            cpu: 100m
            memory: 350M
          kubeReserved:
            cpu: 100m
            memory: 50M
          enforceNodeAllocatable:
          - pods

    - name: Ensure containerd and kubelet are running
      systemd:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - containerd
        - kubelet      

    - name: Initialize the cluster
      shell: kubeadm init --config /etc/kubernetes/kubeadm-config.yaml
      register: kubeadm_init_result
      args:
        chdir: /home/ubuntu
      failed_when: kubeadm_init_result.rc != 0  

    - name: Create .kube directory
      become: yes
      become_user: ubuntu
      file:
        path: $HOME/.kube
        state: directory
        mode: 0755

    - name: Check if admin.conf exists
      stat:
        path: /etc/kubernetes/admin.conf
      register: admin_conf_stat    

    - name: Copy admin.conf to User's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config
        remote_src: yes
        owner: ubuntu
        group: ubuntu
        mode: '0644'
      when: admin_conf_stat.stat.exists

    - name: Install Pod Network
      become: yes
      become_user: ubuntu
      shell: kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml >> pod_network_setup.log
      args:
        chdir: $HOME
        creates: pod_network_setup.log

- name: Configure Join Commands on Master Node
  hosts: master
  become: yes
  tasks:
    - name: Retrieve Join Command
      shell: kubeadm token create --print-join-command
      register: join_command_raw

    - name: Set Join Command
      set_fact:
        join_command: "{{ join_command_raw.stdout_lines[0] }}"

- name: Join Worker Nodes
  hosts: workers
  become: yes
  tasks:
    - name: Enable TCP port 6443 (On Master) is able to connect from Worker
      wait_for: "host=158.160.83.224 port=6443 timeout=1"

    - name: Join worker to cluster
      shell: "{{ hostvars['k8s-master'].join_command }} >> node_joined.log"
      args:
        chdir: /home/ubuntu
        creates: node_joined.log